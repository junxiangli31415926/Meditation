{"ast":null,"code":"var _jsxFileName = \"/Users/hans/Desktop/Meditation/src/components/FadeText/FadeText.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport PropType from 'prop-types';\nimport { fade } from 'style/animation';\nimport { SmallTitle } from 'style/style';\nconst Text = styled(SmallTitle)`\n  color: white;\n  z-index: 3;\n  opacity: 0;\n  animation: ${props => props.playing && css`\n      ${fade} 4s ease-in infinite\n    `};\n`;\ntextArr = [];\n\nfunction DynamicText({\n  playing\n}) {\n  const [textIdx, setTextIdx] = useState(0);\n  const savedmeditationType = localStorage.getItem('meditationType');\n\n  if (savedmeditationType === 'Guided') {\n    textArr = ['Breath in', 'Breath out', 'Just focus on yourself'];\n  } else {\n    textArr = [];\n  }\n\n  let textThatChanges = textArr[textIdx % textArr.length];\n  useEffect(() => {\n    if (playing) {\n      const interval = setInterval(() => {\n        setTextIdx(index => index + 1);\n      }, 4000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playing]);\n  return /*#__PURE__*/React.createElement(Text, {\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }\n  }, textThatChanges);\n}\n\nDynamicText.propType = {\n  playing: PropType.bool\n};\nexport default DynamicText;","map":{"version":3,"sources":["/Users/hans/Desktop/Meditation/src/components/FadeText/FadeText.js"],"names":["React","useState","useEffect","styled","css","PropType","fade","SmallTitle","Text","props","playing","textArr","DynamicText","textIdx","setTextIdx","savedmeditationType","localStorage","getItem","textThatChanges","length","interval","setInterval","index","clearInterval","propType","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,MAAMC,IAAI,GAAGL,MAAM,CAACI,UAAD,CAAa;;;;eAIjBE,KAAK,IAChBA,KAAK,CAACC,OAAN,IACAN,GAAI;QACAE,IAAK;KACP;CARN;AAWAK,OAAO,GAAG,EAAV;;AAEA,SAASC,WAAT,CAAqB;AAAEF,EAAAA;AAAF,CAArB,EAAkC;AAChC,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMc,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA5B;;AACA,MAAIF,mBAAmB,KAAK,QAA5B,EAAsC;AACpCJ,IAAAA,OAAO,GAAG,CAAC,WAAD,EAAc,YAAd,EAA4B,wBAA5B,CAAV;AACH,GAFC,MAEK;AACHA,IAAAA,OAAO,GAAG,EAAV;AACH;;AACC,MAAIO,eAAe,GAAGP,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACQ,MAAnB,CAA7B;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,OAAJ,EAAa;AACX,YAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCP,QAAAA,UAAU,CAACQ,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAAV;AACD,OAF2B,EAEzB,IAFyB,CAA5B;AAGA,aAAO,MAAM;AACXC,QAAAA,aAAa,CAACH,QAAD,CAAb;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACV,OAAD,CATM,CAAT;AAWA,sBAAO,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAEA,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBQ,eAAzB,CAAP;AACD;;AAEDN,WAAW,CAACY,QAAZ,GAAuB;AACrBd,EAAAA,OAAO,EAAEL,QAAQ,CAACoB;AADG,CAAvB;AAIA,eAAeb,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport PropType from 'prop-types';\n\nimport { fade } from 'style/animation';\nimport { SmallTitle } from 'style/style';\n\nconst Text = styled(SmallTitle)`\n  color: white;\n  z-index: 3;\n  opacity: 0;\n  animation: ${props =>\n    props.playing &&\n    css`\n      ${fade} 4s ease-in infinite\n    `};\n`;\n\ntextArr = [];\n\nfunction DynamicText({ playing }) {\n  const [textIdx, setTextIdx] = useState(0);\n  const savedmeditationType = localStorage.getItem('meditationType');\n  if (savedmeditationType === 'Guided') { \n    textArr = ['Breath in', 'Breath out', 'Just focus on yourself'];\n} else {\n    textArr = [];\n}\n  let textThatChanges = textArr[textIdx % textArr.length];\n\n  useEffect(() => {\n    if (playing) {\n      const interval = setInterval(() => {\n        setTextIdx(index => index + 1);\n      }, 4000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playing]);\n\n  return <Text playing={playing}>{textThatChanges}</Text>;\n}\n\nDynamicText.propType = {\n  playing: PropType.bool,\n};\n\nexport default DynamicText;"]},"metadata":{},"sourceType":"module"}