{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst Select = styled.select`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [step, setStep] = useState(1);\n\n  const validateInput = input => {\n    if (!input) {\n      alert(`Please enter your ${step === 1 ? 'name' : step === 2 ? 'age' : step === 3 ? 'meditation duration' : 'meditation type'}.`);\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleSubmit = async () => {\n    if (step === 4 && validateInput(meditationType)) {\n      const meditationData = {\n        name,\n        age,\n        meditationDuration,\n        meditationType\n      };\n\n      try {\n        const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: 'You are a meditation assistant.'\n          }, {\n            role: 'user',\n            content: `My name is ${name}, I am ${age} years old, and I want to meditate for ${meditationDuration} minutes using ${meditationType} meditation.`\n          }]\n        }, {\n          headers: {\n            'Authorization': `Bearer YOUR_OPENAI_API_KEY`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const parsedSentences = response.data.choices[0].message.content.split('. ').map(sentence => sentence.trim());\n        localStorage.setItem('meditationResult', JSON.stringify(parsedSentences));\n        alert(\"Meditation purpose saved successfully!\");\n      } catch (error) {\n        console.error(\"Error calling OpenAI:\", error);\n        alert(\"Failed to process meditation purpose. Please try again.\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, step === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, \"What is your name?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setName(e.target.value),\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  })) : step === 2 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"What is your age?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setAge(e.target.value),\n    value: age,\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  })) : step === 3 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, \"How long would you like to meditate today?\"), /*#__PURE__*/React.createElement(Select, {\n    onChange: e => setMeditationDuration(e.target.value),\n    value: meditationDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"5 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"10 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, \"15 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, \"20 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, \"30 minutes\"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, \"Would you like guided or unguided meditation?\"), /*#__PURE__*/React.createElement(Select, {\n    onChange: e => setMeditationType(e.target.value),\n    value: meditationType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Guided\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Guided\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Unguided\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Unguided\"))), step < 4 ? /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStep(step + 1),\n    text: \"Next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    text: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","axios","MediumTitle","Button","Container","div","Input","input","Select","select","QuestionContainer","Register","name","setName","age","setAge","meditationDuration","setMeditationDuration","meditationType","setMeditationType","step","setStep","validateInput","alert","handleSubmit","meditationData","response","post","model","messages","role","content","headers","parsedSentences","data","choices","message","split","map","sentence","trim","localStorage","setItem","JSON","stringify","error","console","e","target","value","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [step, setStep] = useState(1);\n\n  const validateInput = (input) => {\n    if (!input) {\n      alert(`Please enter your ${step === 1 ? 'name' : step === 2 ? 'age' : step === 3 ? 'meditation duration' : 'meditation type'}.`);\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = async () => {\n    if (step === 4 && validateInput(meditationType)) {\n      const meditationData = {\n        name,\n        age,\n        meditationDuration,\n        meditationType,\n      };\n\n      try {\n        const response = await axios.post('https://api.openai.com/v1/chat/completions', \n          {\n            model: 'gpt-4',\n            messages: [\n              { role: 'system', content: 'You are a meditation assistant.' },\n              { role: 'user', content: `My name is ${name}, I am ${age} years old, and I want to meditate for ${meditationDuration} minutes using ${meditationType} meditation.` }\n            ],\n          },\n          {\n            headers: {\n              'Authorization': `Bearer YOUR_OPENAI_API_KEY`,\n              'Content-Type': 'application/json'\n            }\n          }\n        );\n\n        const parsedSentences = response.data.choices[0].message.content.split('. ').map(sentence => sentence.trim());\n        localStorage.setItem('meditationResult', JSON.stringify(parsedSentences));\n        alert(\"Meditation purpose saved successfully!\");\n\n      } catch (error) {\n        console.error(\"Error calling OpenAI:\", error);\n        alert(\"Failed to process meditation purpose. Please try again.\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <QuestionContainer>\n          {step === 1 ? (\n            <>\n              <MediumTitle>What is your name?</MediumTitle>\n              <Input onChange={(e) => setName(e.target.value)} value={name} />\n            </>\n          ) : step === 2 ? (\n            <>\n              <MediumTitle>What is your age?</MediumTitle>\n              <Input onChange={(e) => setAge(e.target.value)} value={age} type=\"number\" />\n            </>\n          ) : step === 3 ? (\n            <>\n              <MediumTitle>How long would you like to meditate today?</MediumTitle>\n              <Select onChange={(e) => setMeditationDuration(e.target.value)} value={meditationDuration}>\n                <option value=\"5\">5 minutes</option>\n                <option value=\"10\">10 minutes</option>\n                <option value=\"15\">15 minutes</option>\n                <option value=\"20\">20 minutes</option>\n                <option value=\"30\">30 minutes</option>\n              </Select>\n            </>\n          ) : (\n            <>\n              <MediumTitle>Would you like guided or unguided meditation?</MediumTitle>\n              <Select onChange={(e) => setMeditationType(e.target.value)} value={meditationType}>\n                <option value=\"Guided\">Guided</option>\n                <option value=\"Unguided\">Unguided</option>\n              </Select>\n            </>\n          )}\n          {step < 4 ? (\n            <Button onClick={() => setStep(step + 1)} text=\"Next\" />\n          ) : (\n            <Button onClick={handleSubmit} text=\"Submit\" />\n          )}\n        </QuestionContainer>\n      </Container>\n    </div>\n  );\n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}