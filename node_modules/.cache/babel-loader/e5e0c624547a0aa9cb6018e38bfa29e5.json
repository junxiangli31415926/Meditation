{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [step, setStep] = useState(1);\n\n  const handleMeditationPurposeChange = e => setMeditationPurpose(e.target.value);\n\n  const sendToOpenAI = async () => {\n    if (!meditationPurpose.trim()) {\n      alert('Please enter your meditation purpose.');\n      return;\n    }\n\n    setLoading(true);\n    const prompt = `Provide three short meditation guidance messages based on this meditation purpose: \"${meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-4',\n        messages: [{\n          role: 'system',\n          content: 'You are a meditation assistant providing concise guidance.'\n        }, {\n          role: 'user',\n          content: prompt\n        }]\n      }, {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          // 从.env读取API密钥\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseText = response.data.choices[0].message.content;\n      const parsedSentences = responseText.split('. ').slice(0, 3).map(sentence => sentence.trim());\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n      setAiResponse(parsedSentences);\n      setStep(6); // Move to the next step\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, step === 5 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"What's the purpose for your meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleMeditationPurposeChange,\n    value: meditationPurpose,\n    placeholder: \"Enter your purpose...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: sendToOpenAI,\n    text: loading ? 'Processing...' : 'Submit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  })) : step === 6 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"Suggestions from AI:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, aiResponse === null || aiResponse === void 0 ? void 0 : aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }, sentence))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.history.push('/'),\n    text: \"Next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStep(5),\n    text: \"Next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","axios","MediumTitle","Button","Container","div","Input","input","QuestionContainer","Register","props","meditationPurpose","setMeditationPurpose","aiResponse","setAiResponse","loading","setLoading","step","setStep","handleMeditationPurposeChange","e","target","value","sendToOpenAI","trim","alert","prompt","response","post","model","messages","role","content","headers","Authorization","process","env","REACT_APP_OPENAI_API_KEY","responseText","data","choices","message","parsedSentences","split","slice","map","sentence","localStorage","setItem","JSON","stringify","error","console","index","history","push","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [step, setStep] = useState(1);\n\n  const handleMeditationPurposeChange = (e) => setMeditationPurpose(e.target.value);\n\n  const sendToOpenAI = async () => {\n    if (!meditationPurpose.trim()) {\n      alert('Please enter your meditation purpose.');\n      return;\n    }\n\n    setLoading(true);\n    const prompt = `Provide three short meditation guidance messages based on this meditation purpose: \"${meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: [\n            { role: 'system', content: 'You are a meditation assistant providing concise guidance.' },\n            { role: 'user', content: prompt },\n          ],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,  // 从.env读取API密钥\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const responseText = response.data.choices[0].message.content;\n      const parsedSentences = responseText.split('. ').slice(0, 3).map(sentence => sentence.trim());\n\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n\n      setAiResponse(parsedSentences);\n      setStep(6);  // Move to the next step\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <QuestionContainer>\n          {step === 5 ? (\n            <>\n              <MediumTitle>What's the purpose for your meditation?</MediumTitle>\n              <Input\n                onChange={handleMeditationPurposeChange}\n                value={meditationPurpose}\n                placeholder=\"Enter your purpose...\"\n              />\n              <Button onClick={sendToOpenAI} text={loading ? 'Processing...' : 'Submit'} />\n            </>\n          ) : step === 6 ? (\n            <>\n              <MediumTitle>Suggestions from AI:</MediumTitle>\n              <ul>\n                {aiResponse?.map((sentence, index) => (\n                  <li key={index}>{sentence}</li>\n                ))}\n              </ul>\n              <Button onClick={() => props.history.push('/')} text=\"Next\" />\n            </>\n          ) : (\n            <Button onClick={() => setStep(5)} text=\"Next\" />\n          )}\n        </QuestionContainer>\n      </Container>\n    </div>\n  );\n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}