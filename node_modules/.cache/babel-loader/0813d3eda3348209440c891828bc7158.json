{"ast":null,"code":"var _jsxFileName = \"/Users/hans/Desktop/Meditation/src/containers/Theme/Theme.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container } from 'containers/Theme/ThemeStyles';\nimport FadeText from 'components/FadeText/FadeText';\nimport ProgressBar from 'components/ProgressBar/ProgressBar';\nimport TimerBtn from 'components/Button/TimerBtn';\nimport PlayBtn from 'components/Button/PlayBtn';\n\nfunction Theme(props) {\n  const {\n    url,\n    theme,\n    bgImg\n  } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const savedDuration = localStorage.getItem('meditationDuration');\n  const [duration, setDuration] = useState(savedDuration * 60);\n  const [currentTime, setCurrentTime] = useState(0);\n  const handleClick = useCallback(time => setDuration(time), []);\n  const handleToggle = useCallback(() => setPlaying(!playing), [playing]);\n\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  const updateCurrentTime = useCallback(() => setCurrentTime(audio.currentTime), [audio.currentTime]); // Audio\n\n  useEffect(() => {\n    audio.addEventListener('timeupdate', updateCurrentTime);\n    return () => audio.removeEventListener('timeupdate', updateCurrentTime);\n  }, [audio, updateCurrentTime]);\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n    return () => audio.pause();\n  }, [playing, audio]); // Timer\n\n  useEffect(() => {\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return () => clearTimeout(token);\n    }\n  });\n\n  if (currentTime >= duration) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/congraturation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    bgImg: bgImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FadeText, {\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    playing: playing,\n    duration: duration,\n    currentTime: Math.floor(currentTime),\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayBtn, {\n    playing: playing,\n    onClick: handleToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerBtn, {\n    onClick: handleClick,\n    duration: duration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), props.children);\n}\n\nTheme.propTypes = {\n  url: PropTypes.string,\n  theme: PropTypes.string,\n  bgImg: PropTypes.string\n};\nexport default React.memo(Theme);","map":{"version":3,"sources":["/Users/hans/Desktop/Meditation/src/containers/Theme/Theme.js"],"names":["React","useState","useEffect","useCallback","Redirect","PropTypes","Container","FadeText","ProgressBar","TimerBtn","PlayBtn","Theme","props","url","theme","bgImg","audio","Audio","playing","setPlaying","savedDuration","localStorage","getItem","duration","setDuration","currentTime","setCurrentTime","handleClick","time","handleToggle","updateTime","updateCurrentTime","addEventListener","removeEventListener","play","pause","token","setTimeout","clearTimeout","Math","floor","children","propTypes","string","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Container } from 'containers/Theme/ThemeStyles';\nimport FadeText from 'components/FadeText/FadeText';\nimport ProgressBar from 'components/ProgressBar/ProgressBar';\nimport TimerBtn from 'components/Button/TimerBtn';\nimport PlayBtn from 'components/Button/PlayBtn';\n\nfunction Theme(props) {\n  const { url, theme, bgImg } = props;\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n  const savedDuration = localStorage.getItem('meditationDuration');\n  const [duration, setDuration] = useState(savedDuration*60);\n  const [currentTime, setCurrentTime] = useState(0);\n  const handleClick = useCallback(time => setDuration(time), []);\n  const handleToggle = useCallback(() => setPlaying(!playing), [playing]);\n  const updateTime = () => {\n    if (playing) setDuration(duration - 1);\n  };\n\n  const updateCurrentTime = useCallback(\n    () => setCurrentTime(audio.currentTime),\n    [audio.currentTime]\n  );\n\n  // Audio\n  useEffect(() => {\n    audio.addEventListener('timeupdate', updateCurrentTime);\n    return () => audio.removeEventListener('timeupdate', updateCurrentTime);\n  }, [audio, updateCurrentTime]);\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n    return () => audio.pause();\n  }, [playing, audio]);\n\n  // Timer\n  useEffect(() => {\n    if (playing) {\n      const token = setTimeout(updateTime, 1000);\n      return () => clearTimeout(token);\n    }\n  });\n\n  if (currentTime >= duration) {\n    return <Redirect to=\"/congraturation\" />;\n  }\n\n  return (\n    <Container bgImg={bgImg}>\n      <FadeText playing={playing} />\n      <ProgressBar\n        playing={playing}\n        duration={duration}\n        currentTime={Math.floor(currentTime)}\n        theme={theme}\n      />\n      <PlayBtn playing={playing} onClick={handleToggle} />\n      <TimerBtn onClick={handleClick} duration={duration} />\n      {props.children}\n    </Container>\n  );\n}\n\nTheme.propTypes = {\n  url: PropTypes.string,\n  theme: PropTypes.string,\n  bgImg: PropTypes.string,\n};\n\nexport default React.memo(Theme);\n"]},"metadata":{},"sourceType":"module"}