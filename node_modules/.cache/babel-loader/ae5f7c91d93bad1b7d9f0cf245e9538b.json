{"ast":null,"code":"'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\nconst validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\n\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n\n\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error(); // slice off the Error: ... line\n\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n\n        try {\n          if (!err.stack) {\n            err.stack = stack; // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack;\n          }\n        } catch (e) {// ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n    const {\n      transitional,\n      paramsSerializer,\n      headers\n    } = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true); // Set config.method\n\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase(); // Flatten headers\n\n    let contextHeaders = headers && utils.merge(headers.common, headers[config.method]);\n    headers && utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], method => {\n      delete headers[method];\n    });\n    config.headers = AxiosHeaders.concat(contextHeaders, headers); // filter out skipped interceptors\n\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n    let newConfig = config;\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n\n} // Provide aliases for supported request methods\n\n\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\nexport default Axios;","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/node_modules/axios/lib/core/Axios.js"],"names":["utils","buildURL","InterceptorManager","dispatchRequest","mergeConfig","buildFullPath","validator","AxiosHeaders","validators","Axios","constructor","instanceConfig","defaults","interceptors","request","response","configOrUrl","config","_request","err","Error","dummy","captureStackTrace","stack","replace","String","endsWith","e","url","transitional","paramsSerializer","headers","undefined","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","clarifyTimeoutError","isFunction","serialize","encode","function","baseUrl","spelling","withXsrfToken","method","toLowerCase","contextHeaders","merge","common","forEach","concat","requestInterceptorChain","synchronousRequestInterceptors","unshiftRequestInterceptors","interceptor","runWhen","synchronous","unshift","fulfilled","rejected","responseInterceptorChain","pushResponseInterceptors","push","promise","i","len","chain","bind","apply","length","Promise","resolve","then","newConfig","onFulfilled","onRejected","error","call","reject","getUri","fullPath","baseURL","params","forEachMethodNoData","prototype","data","forEachMethodWithData","generateHTTPMethod","isForm","httpMethod"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  async request(configOrUrl, config) {\n    try {\n      return await this._request(configOrUrl, config);\n    } catch (err) {\n      if (err instanceof Error) {\n        let dummy = {};\n\n        Error.captureStackTrace ? Error.captureStackTrace(dummy) : (dummy = new Error());\n\n        // slice off the Error: ... line\n        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, '') : '';\n        try {\n          if (!err.stack) {\n            err.stack = stack;\n            // match without the 2 top stack lines\n          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ''))) {\n            err.stack += '\\n' + stack\n          }\n        } catch (e) {\n          // ignore the case where \"stack\" is an un-writable property\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  _request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    validator.assertOptions(config, {\n      baseUrl: validators.spelling('baseURL'),\n      withXsrfToken: validators.spelling('withXSRFToken')\n    }, true);\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n"]},"metadata":{},"sourceType":"module"}