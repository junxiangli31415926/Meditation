{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\nconst SuggestionsContainer = styled.div`\n  font-size: 1.8rem; /* 调整字体大小 */\n  font-weight: 500;\n  color: #333;\n  text-align: center;\n  margin-top: 2rem;\n\n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n\n  li {\n    margin-bottom: 1rem;\n    line-height: 1.6;\n  }\n`;\n{\n  step === 6 && aiResponse ? /*#__PURE__*/React.createElement(SuggestionsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, \"Suggestions from AI:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, sentence))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.history.push('/'),\n    text: \"Finish\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  })) : /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNext,\n    text: loading ? 'Processing...' : 'Next',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  });\n}\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [step, setStep] = useState(1);\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const validateInput = input => {\n    if (!input.trim()) {\n      alert('Please fill out this field.');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleNext = async () => {\n    if (step === 1 && validateInput(name)) {\n      localStorage.setItem('name', name);\n      setStep(2);\n    } else if (step === 2 && validateInput(age)) {\n      localStorage.setItem('age', age);\n      setStep(3);\n    } else if (step === 3 && validateInput(meditationDuration)) {\n      localStorage.setItem('meditationDuration', meditationDuration);\n      setStep(4);\n    } else if (step === 4 && validateInput(meditationType)) {\n      localStorage.setItem('meditationType', meditationType);\n      setStep(5);\n    } else if (step === 5 && validateInput(meditationPurpose)) {\n      await sendToOpenAI();\n    }\n  };\n\n  const sendToOpenAI = async () => {\n    setLoading(true);\n    const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\n    if (!OPENAI_API_KEY) {\n      alert('API key is missing. Please check your environment variables.');\n      setLoading(false);\n      return;\n    }\n\n    console.log('Sending request with API Key:', OPENAI_API_KEY);\n    const prompt = [{\n      role: 'system',\n      content: 'You are a meditation assistant providing concise guidance.'\n    }, {\n      role: 'user',\n      content: `Provide three short meditation guidance messages based on this meditation purpose: \"${meditationPurpose}\"`\n    }];\n\n    try {\n      var _responseData$choices, _responseData$choices2;\n\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: prompt,\n          max_tokens: 150\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`API response error: ${response.status} ${response.statusText}`);\n      }\n\n      const responseData = await response.json();\n      console.log('API Response:', responseData); // 解析返回数据\n\n      const responseText = ((_responseData$choices = responseData.choices[0]) === null || _responseData$choices === void 0 ? void 0 : (_responseData$choices2 = _responseData$choices.message) === null || _responseData$choices2 === void 0 ? void 0 : _responseData$choices2.content) || '';\n      const parsedSentences = responseText.split('. ').slice(0, 3).map(sentence => sentence.trim()); // 存储数据\n\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n      setAiResponse(parsedSentences);\n      setStep(6);\n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, step === 1 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }, \"What is your name?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setName(e.target.value),\n    value: name,\n    placeholder: \"Enter your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  })), step === 2 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }, \"What is your age?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setAge(e.target.value),\n    value: age,\n    type: \"number\",\n    placeholder: \"Enter your age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  })), step === 3 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, \"How long would you like to meditate today?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setMeditationDuration(e.target.value),\n    value: meditationDuration,\n    placeholder: \"Enter duration (e.g. 10 mins)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  })), step === 4 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }, \"Would you like guided or unguided meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setMeditationType(e.target.value),\n    value: meditationType,\n    placeholder: \"Guided/Unguided\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 15\n    }\n  })), step === 5 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, \"What's the purpose for your meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setMeditationPurpose(e.target.value),\n    value: meditationPurpose,\n    placeholder: \"Enter your purpose...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 15\n    }\n  })), step === 6 && aiResponse ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, \"Suggestions from AI:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }, aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 19\n    }\n  }, sentence))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.history.push('/'),\n    text: \"Finish\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNext,\n    text: loading ? 'Processing...' : 'Next',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","MediumTitle","Button","SuggestionsContainer","div","step","aiResponse","map","sentence","index","props","history","push","handleNext","loading","Container","Input","input","QuestionContainer","Register","setStep","name","setName","age","setAge","meditationDuration","setMeditationDuration","meditationType","setMeditationType","meditationPurpose","setMeditationPurpose","setAiResponse","setLoading","validateInput","trim","alert","localStorage","setItem","sendToOpenAI","OPENAI_API_KEY","process","env","REACT_APP_OPENAI_API_KEY","console","log","prompt","role","content","response","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","max_tokens","ok","Error","status","statusText","responseData","json","responseText","choices","message","parsedSentences","split","slice","error","e","target","value","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\n\nconst SuggestionsContainer = styled.div`\n  font-size: 1.8rem; /* 调整字体大小 */\n  font-weight: 500;\n  color: #333;\n  text-align: center;\n  margin-top: 2rem;\n\n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n\n  li {\n    margin-bottom: 1rem;\n    line-height: 1.6;\n  }\n`;\n\n{step === 6 && aiResponse ? (\n  <SuggestionsContainer>\n    <MediumTitle>Suggestions from AI:</MediumTitle>\n    <ul>\n      {aiResponse.map((sentence, index) => (\n        <li key={index}>{sentence}</li>\n      ))}\n    </ul>\n    <Button onClick={() => props.history.push('/')} text=\"Finish\" />\n  </SuggestionsContainer>\n) : (\n  <Button onClick={handleNext} text={loading ? 'Processing...' : 'Next'} />\n)}\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [step, setStep] = useState(1);\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const validateInput = (input) => {\n    if (!input.trim()) {\n      alert('Please fill out this field.');\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = async () => {\n    if (step === 1 && validateInput(name)) {\n      localStorage.setItem('name', name);\n      setStep(2);\n    } else if (step === 2 && validateInput(age)) {\n      localStorage.setItem('age', age);\n      setStep(3);\n    } else if (step === 3 && validateInput(meditationDuration)) {\n      localStorage.setItem('meditationDuration', meditationDuration);\n      setStep(4);\n    } else if (step === 4 && validateInput(meditationType)) {\n      localStorage.setItem('meditationType', meditationType);\n      setStep(5);\n    } else if (step === 5 && validateInput(meditationPurpose)) {\n      await sendToOpenAI();\n    }\n  };\n\n  const sendToOpenAI = async () => {\n    setLoading(true);\n    const OPENAI_API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\n    if (!OPENAI_API_KEY) {\n      alert('API key is missing. Please check your environment variables.');\n      setLoading(false);\n      return;\n    }\n\n    console.log('Sending request with API Key:', OPENAI_API_KEY);\n\n    const prompt = [\n      {\n        role: 'system',\n        content: 'You are a meditation assistant providing concise guidance.',\n      },\n      {\n        role: 'user',\n        content: `Provide three short meditation guidance messages based on this meditation purpose: \"${meditationPurpose}\"`,\n      }\n    ];\n\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: prompt,\n          max_tokens: 150,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`API response error: ${response.status} ${response.statusText}`);\n      }\n\n      const responseData = await response.json();\n      console.log('API Response:', responseData);\n\n      // 解析返回数据\n      const responseText = responseData.choices[0]?.message?.content || '';\n      const parsedSentences = responseText.split('. ').slice(0, 3).map(sentence => sentence.trim());\n\n      // 存储数据\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n\n      setAiResponse(parsedSentences);\n      setStep(6);\n    } catch (error) {\n      console.error('Error calling OpenAI API:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <QuestionContainer>\n          {step === 1 && (\n            <>\n              <MediumTitle>What is your name?</MediumTitle>\n              <Input onChange={(e) => setName(e.target.value)} value={name} placeholder=\"Enter your name\" />\n            </>\n          )}\n          {step === 2 && (\n            <>\n              <MediumTitle>What is your age?</MediumTitle>\n              <Input onChange={(e) => setAge(e.target.value)} value={age} type=\"number\" placeholder=\"Enter your age\" />\n            </>\n          )}\n          {step === 3 && (\n            <>\n              <MediumTitle>How long would you like to meditate today?</MediumTitle>\n              <Input\n                onChange={(e) => setMeditationDuration(e.target.value)}\n                value={meditationDuration}\n                placeholder=\"Enter duration (e.g. 10 mins)\"\n              />\n            </>\n          )}\n          {step === 4 && (\n            <>\n              <MediumTitle>Would you like guided or unguided meditation?</MediumTitle>\n              <Input\n                onChange={(e) => setMeditationType(e.target.value)}\n                value={meditationType}\n                placeholder=\"Guided/Unguided\"\n              />\n            </>\n          )}\n          {step === 5 && (\n            <>\n              <MediumTitle>What's the purpose for your meditation?</MediumTitle>\n              <Input\n                onChange={(e) => setMeditationPurpose(e.target.value)}\n                value={meditationPurpose}\n                placeholder=\"Enter your purpose...\"\n              />\n            </>\n          )}\n          {step === 6 && aiResponse ? (\n            <>\n              <MediumTitle>Suggestions from AI:</MediumTitle>\n              <ul>\n                {aiResponse.map((sentence, index) => (\n                  <li key={index}>{sentence}</li>\n                ))}\n              </ul>\n              <Button onClick={() => props.history.push('/')} text=\"Finish\" />\n            </>\n          ) : (\n            <Button onClick={handleNext} text={loading ? 'Processing...' : 'Next'} />\n          )}\n        </QuestionContainer>\n      </Container>\n    </div>\n  );\n  \n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}