{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [step, setStep] = useState(1);\n\n  const validateInput = input => {\n    if (!input) {\n      alert(`Please enter your ${step === 1 ? 'name' : step === 2 ? 'age' : step === 3 ? 'meditation duration' : step === 4 ? 'meditation type' : 'meditation purpose'}.`);\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleMeditationPurposeChange = e => setMeditationPurpose(e.target.value);\n\n  const sendToOpenAI = async () => {\n    if (!validateInput(meditationPurpose)) return;\n    const prompt = `Analyze and provide suggestions based on this meditation purpose: \"${meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-4',\n        messages: [{\n          role: 'system',\n          content: 'You are a meditation assistant.'\n        }, {\n          role: 'user',\n          content: prompt\n        }]\n      }, {\n        headers: {\n          'Authorization': `Bearer YOUR_OPENAI_API_KEY`,\n          // Replace with your API key\n          'Content-Type': 'application/json'\n        }\n      });\n      const parsedSentences = response.data.choices[0].message.content.split('. ').map(sentence => sentence.trim()); // Store the response in localStorage\n\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n      setAiResponse(parsedSentences);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, step === 5 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"What's the purpose for your meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleMeditationPurposeChange,\n    value: meditationPurpose,\n    placeholder: \"Enter your purpose...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: sendToOpenAI,\n    text: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setStep(5),\n    text: \"Next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), aiResponse && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"Suggestions from AI:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, sentence)))))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","axios","MediumTitle","Button","Container","div","Input","input","QuestionContainer","Register","props","name","setName","age","setAge","meditationDuration","setMeditationDuration","meditationType","setMeditationType","meditationPurpose","setMeditationPurpose","aiResponse","setAiResponse","step","setStep","validateInput","alert","handleMeditationPurposeChange","e","target","value","sendToOpenAI","prompt","response","post","model","messages","role","content","headers","parsedSentences","data","choices","message","split","map","sentence","trim","localStorage","setItem","JSON","stringify","error","console","index","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [step, setStep] = useState(1);\n\n  const validateInput = (input) => {\n    if (!input) {\n      alert(`Please enter your ${step === 1 ? 'name' : step === 2 ? 'age' : step === 3 ? 'meditation duration' : step === 4 ? 'meditation type' : 'meditation purpose'}.`);\n      return false;\n    }\n    return true;\n  };\n\n  const handleMeditationPurposeChange = (e) => setMeditationPurpose(e.target.value);\n\n  const sendToOpenAI = async () => {\n    if (!validateInput(meditationPurpose)) return;\n\n    const prompt = `Analyze and provide suggestions based on this meditation purpose: \"${meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: [\n            { role: 'system', content: 'You are a meditation assistant.' },\n            { role: 'user', content: prompt },\n          ],\n        },\n        {\n          headers: {\n            'Authorization': `Bearer YOUR_OPENAI_API_KEY`, // Replace with your API key\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const parsedSentences = response.data.choices[0].message.content.split('. ').map(sentence => sentence.trim());\n\n      // Store the response in localStorage\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n\n      setAiResponse(parsedSentences);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <QuestionContainer>\n          {step === 5 ? (\n            <>\n              <MediumTitle>What's the purpose for your meditation?</MediumTitle>\n              <Input\n                onChange={handleMeditationPurposeChange}\n                value={meditationPurpose}\n                placeholder=\"Enter your purpose...\"\n              />\n              <Button onClick={sendToOpenAI} text=\"Submit\" />\n            </>\n          ) : (\n            <Button onClick={() => setStep(5)} text=\"Next\" />\n          )}\n          {aiResponse && (\n            <div>\n              <MediumTitle>Suggestions from AI:</MediumTitle>\n              <ul>\n                {aiResponse.map((sentence, index) => (\n                  <li key={index}>{sentence}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </QuestionContainer>\n      </Container>\n    </div>\n  );\n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}