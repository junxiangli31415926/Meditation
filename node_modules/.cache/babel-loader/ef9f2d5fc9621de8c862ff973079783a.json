{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 2rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 1rem;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst Select = styled.select`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 2rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 1rem;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50%;\n\n  @media (max-width: 900px) {\n    width: 80%;\n  }\n`;\n\nfunction Register() {\n  const [formData, setFormData] = useState({\n    name: '',\n    age: '',\n    meditationDuration: '5',\n    meditationType: 'Guided',\n    meditationPurpose: ''\n  });\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false); // Handle input changes\n\n  const handleChange = e => {\n    setFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  }; // Validate all inputs\n\n\n  const validateForm = () => {\n    const {\n      name,\n      age,\n      meditationPurpose\n    } = formData;\n\n    if (!name || !age || !meditationPurpose) {\n      alert('Please fill in all the fields.');\n      return false;\n    }\n\n    return true;\n  }; // Submit the form and call OpenAI\n\n\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(true);\n    const prompt = `Analyze and provide suggestions based on this meditation purpose: \"${formData.meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-4',\n        messages: [{\n          role: 'system',\n          content: 'You are a meditation assistant.'\n        }, {\n          role: 'user',\n          content: prompt\n        }]\n      }, {\n        headers: {\n          'Authorization': `Bearer YOUR_OPENAI_API_KEY`,\n          // Replace with your API key\n          'Content-Type': 'application/json'\n        }\n      });\n      const parsedSentences = response.data.choices[0].message.content.split('. ').map(sentence => sentence.trim()); // Store user data and AI response in localStorage\n\n      localStorage.setItem('meditationData', JSON.stringify(formData));\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n      setAiResponse(parsedSentences);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"What is your name?\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"name\",\n    value: formData.name,\n    onChange: handleChange,\n    placeholder: \"Enter your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"What is your age?\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    name: \"age\",\n    value: formData.age,\n    onChange: handleChange,\n    placeholder: \"Enter your age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 11\n    }\n  }, \"How long would you like to meditate today?\"), /*#__PURE__*/React.createElement(Select, {\n    name: \"meditationDuration\",\n    value: formData.meditationDuration,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"5 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"10\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, \"10 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"15\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"15 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, \"20 minutes\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"30\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, \"30 minutes\")), /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \"Would you like guided or unguided meditation?\"), /*#__PURE__*/React.createElement(Select, {\n    name: \"meditationType\",\n    value: formData.meditationType,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Guided\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, \"Guided\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"Unguided\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, \"Unguided\")), /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, \"What's the purpose for your meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"meditationPurpose\",\n    value: formData.meditationPurpose,\n    onChange: handleChange,\n    placeholder: \"Enter your purpose\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    text: loading ? 'Processing...' : 'Submit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }), aiResponse && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, \"AI Suggestions:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }, sentence)))))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","axios","MediumTitle","Button","Container","div","Input","input","Select","select","QuestionContainer","Register","formData","setFormData","name","age","meditationDuration","meditationType","meditationPurpose","aiResponse","setAiResponse","loading","setLoading","handleChange","e","target","value","validateForm","alert","handleSubmit","prompt","response","post","model","messages","role","content","headers","parsedSentences","data","choices","message","split","map","sentence","trim","localStorage","setItem","JSON","stringify","error","console","index","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 2rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 1rem;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 2rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 1rem;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50%;\n\n  @media (max-width: 900px) {\n    width: 80%;\n  }\n`;\n\nfunction Register() {\n  const [formData, setFormData] = useState({\n    name: '',\n    age: '',\n    meditationDuration: '5',\n    meditationType: 'Guided',\n    meditationPurpose: '',\n  });\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Handle input changes\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  // Validate all inputs\n  const validateForm = () => {\n    const { name, age, meditationPurpose } = formData;\n    if (!name || !age || !meditationPurpose) {\n      alert('Please fill in all the fields.');\n      return false;\n    }\n    return true;\n  };\n\n  // Submit the form and call OpenAI\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n\n    setLoading(true);\n\n    const prompt = `Analyze and provide suggestions based on this meditation purpose: \"${formData.meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: [\n            { role: 'system', content: 'You are a meditation assistant.' },\n            { role: 'user', content: prompt },\n          ],\n        },\n        {\n          headers: {\n            'Authorization': `Bearer YOUR_OPENAI_API_KEY`, // Replace with your API key\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const parsedSentences = response.data.choices[0].message.content.split('. ').map(sentence => sentence.trim());\n\n      // Store user data and AI response in localStorage\n      localStorage.setItem('meditationData', JSON.stringify(formData));\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n\n      setAiResponse(parsedSentences);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <QuestionContainer>\n          <MediumTitle>What is your name?</MediumTitle>\n          <Input \n            type=\"text\" \n            name=\"name\" \n            value={formData.name} \n            onChange={handleChange} \n            placeholder=\"Enter your name\"\n          />\n\n          <MediumTitle>What is your age?</MediumTitle>\n          <Input \n            type=\"number\" \n            name=\"age\" \n            value={formData.age} \n            onChange={handleChange} \n            placeholder=\"Enter your age\"\n          />\n\n          <MediumTitle>How long would you like to meditate today?</MediumTitle>\n          <Select \n            name=\"meditationDuration\" \n            value={formData.meditationDuration} \n            onChange={handleChange}\n          >\n            <option value=\"5\">5 minutes</option>\n            <option value=\"10\">10 minutes</option>\n            <option value=\"15\">15 minutes</option>\n            <option value=\"20\">20 minutes</option>\n            <option value=\"30\">30 minutes</option>\n          </Select>\n\n          <MediumTitle>Would you like guided or unguided meditation?</MediumTitle>\n          <Select \n            name=\"meditationType\" \n            value={formData.meditationType} \n            onChange={handleChange}\n          >\n            <option value=\"Guided\">Guided</option>\n            <option value=\"Unguided\">Unguided</option>\n          </Select>\n\n          <MediumTitle>What's the purpose for your meditation?</MediumTitle>\n          <Input \n            type=\"text\" \n            name=\"meditationPurpose\" \n            value={formData.meditationPurpose} \n            onChange={handleChange} \n            placeholder=\"Enter your purpose\"\n          />\n\n          <Button onClick={handleSubmit} text={loading ? 'Processing...' : 'Submit'} />\n          \n          {aiResponse && (\n            <div>\n              <MediumTitle>AI Suggestions:</MediumTitle>\n              <ul>\n                {aiResponse.map((sentence, index) => (\n                  <li key={index}>{sentence}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </QuestionContainer>\n      </Container>\n    </div>\n  );\n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}