{"ast":null,"code":"var _jsxFileName = \"/Users/hans/Desktop/Meditation/src/components/FadeText/FadeText.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport PropType from 'prop-types';\nimport { fade } from 'style/animation';\nimport { SmallTitle } from 'style/style';\nconst Text = styled(SmallTitle)`\n  color: white;\n  z-index: 3;\n  opacity: 0;\n  animation: ${props => props.playing && css`\n      ${fade} 4s ease-in infinite\n    `};\n`;\nlet textArr = [];\n\nfunction DynamicText({\n  playing\n}) {\n  const [textIdx, setTextIdx] = useState(0);\n  const savedMeditationType = localStorage.getItem('meditationType');\n  const age = parseInt(localStorage.getItem('age'), 10) || 0;\n  const textArr = savedMeditationType === 'Unguided' ? [] : [\"Inhale calmness\", \"Exhale stress\", \"Be present in this moment\", \"Feel the rhythm of your breath\", \"Let go of tension\", \"Your mind is at ease\", \"One breath at a time\", \"You are in control\", \"Breathe. Relax. Repeat.\", \"Find your inner balance\"];\n  const time = 4000 + age * 20;\n  const textThatChanges = textArr.length > 0 ? textArr[textIdx % textArr.length] : \"\";\n  useEffect(() => {\n    if (playing && textArr.length > 0) {\n      const interval = setInterval(() => {\n        setTextIdx(index => index + 1);\n      }, time);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playing, textArr, time]);\n  return /*#__PURE__*/React.createElement(Text, {\n    playing: playing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }, textThatChanges || \"No messages available\");\n}\n\nDynamicText.propType = {\n  playing: PropType.bool\n};\nexport default DynamicText;","map":{"version":3,"sources":["/Users/hans/Desktop/Meditation/src/components/FadeText/FadeText.js"],"names":["React","useState","useEffect","styled","css","PropType","fade","SmallTitle","Text","props","playing","textArr","DynamicText","textIdx","setTextIdx","savedMeditationType","localStorage","getItem","age","parseInt","time","textThatChanges","length","interval","setInterval","index","clearInterval","propType","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,MAAMC,IAAI,GAAGL,MAAM,CAACI,UAAD,CAAa;;;;eAIjBE,KAAK,IAChBA,KAAK,CAACC,OAAN,IACAN,GAAI;QACAE,IAAK;KACP;CARN;AAUA,IAAIK,OAAO,GAAG,EAAd;;AAGA,SAASC,WAAT,CAAqB;AAAEF,EAAAA;AAAF,CAArB,EAAkC;AAChC,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAMc,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAA5B;AACA,QAAMC,GAAG,GAAGC,QAAQ,CAACH,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAD,EAA8B,EAA9B,CAAR,IAA6C,CAAzD;AAEA,QAAMN,OAAO,GAAGI,mBAAmB,KAAK,UAAxB,GAAqC,EAArC,GAA0C,CACxD,iBADwD,EAExD,eAFwD,EAGxD,2BAHwD,EAIxD,gCAJwD,EAKxD,mBALwD,EAMxD,sBANwD,EAOxD,sBAPwD,EAQxD,oBARwD,EASxD,yBATwD,EAUxD,yBAVwD,CAA1D;AAaA,QAAMK,IAAI,GAAG,OAAOF,GAAG,GAAG,EAA1B;AACA,QAAMG,eAAe,GAAGV,OAAO,CAACW,MAAR,GAAiB,CAAjB,GAAqBX,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACW,MAAnB,CAA5B,GAAyD,EAAjF;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,OAAO,IAAIC,OAAO,CAACW,MAAR,GAAiB,CAAhC,EAAmC;AACjC,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCV,QAAAA,UAAU,CAAEW,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAV;AACD,OAF2B,EAEzBL,IAFyB,CAA5B;AAGA,aAAO,MAAM;AACXM,QAAAA,aAAa,CAACH,QAAD,CAAb;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACb,OAAD,EAAUC,OAAV,EAAmBS,IAAnB,CATM,CAAT;AAWA,sBAAO,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAEV,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBW,eAAe,IAAI,uBAA5C,CAAP;AACD;;AAEDT,WAAW,CAACe,QAAZ,GAAuB;AACrBjB,EAAAA,OAAO,EAAEL,QAAQ,CAACuB;AADG,CAAvB;AAIA,eAAehB,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport PropType from 'prop-types';\n\nimport { fade } from 'style/animation';\nimport { SmallTitle } from 'style/style';\n\nconst Text = styled(SmallTitle)`\n  color: white;\n  z-index: 3;\n  opacity: 0;\n  animation: ${props =>\n    props.playing &&\n    css`\n      ${fade} 4s ease-in infinite\n    `};\n`;\nlet textArr = [];\n\n\nfunction DynamicText({ playing }) {\n  const [textIdx, setTextIdx] = useState(0);\n  const savedMeditationType = localStorage.getItem('meditationType');\n  const age = parseInt(localStorage.getItem('age'), 10) || 0;\n\n  const textArr = savedMeditationType === 'Unguided' ? [] : [\n    \"Inhale calmness\",\n    \"Exhale stress\",\n    \"Be present in this moment\",\n    \"Feel the rhythm of your breath\",\n    \"Let go of tension\",\n    \"Your mind is at ease\",\n    \"One breath at a time\",\n    \"You are in control\",\n    \"Breathe. Relax. Repeat.\",\n    \"Find your inner balance\",\n  ];\n\n  const time = 4000 + age * 20;\n  const textThatChanges = textArr.length > 0 ? textArr[textIdx % textArr.length] : \"\";\n\n  useEffect(() => {\n    if (playing && textArr.length > 0) {\n      const interval = setInterval(() => {\n        setTextIdx((index) => index + 1);\n      }, time);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [playing, textArr, time]);\n\n  return <Text playing={playing}>{textThatChanges || \"No messages available\"}</Text>;\n}\n\nDynamicText.propType = {\n  playing: PropType.bool,\n};\n\nexport default DynamicText;"]},"metadata":{},"sourceType":"module"}