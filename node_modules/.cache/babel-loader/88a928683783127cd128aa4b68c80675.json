{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background: #f5f5f7;\n  font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", Arial, sans-serif;\n`;\nconst Card = styled.div`\n  background: white;\n  padding: 40px;\n  border-radius: 20px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  max-width: 480px;\n  width: 90%;\n  text-align: center;\n`;\nconst Title = styled.h1`\n  font-size: 2rem;\n  font-weight: 600;\n  color: #1d1d1f;\n  margin-bottom: 30px;\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 1.2rem;\n  text-align: center;\n  border: none;\n  border-radius: 12px;\n  background: #f1f1f1;\n  margin-bottom: 20px;\n  outline: none;\n  padding: 0 20px;\n  font-weight: 400;\n  color: #1d1d1f;\n  transition: all 0.3s ease;\n\n  &:focus {\n    background: #ffffff;\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\n  }\n`;\nconst Button = styled.button`\n  width: 100%;\n  height: 50px;\n  font-size: 1.4rem;\n  font-weight: 600;\n  background: #007aff;\n  border: none;\n  border-radius: 12px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-top: 20px;\n  box-shadow: 0 4px 10px rgba(0, 122, 255, 0.3);\n\n  &:hover {\n    background: #005ecb;\n  }\n\n  &:disabled {\n    background: #d1d1d6;\n    cursor: not-allowed;\n  }\n`;\nconst ResponseContainer = styled.div`\n  margin-top: 30px;\n  text-align: left;\n  font-size: 1.1rem;\n  color: #333;\n`;\n\nfunction Register() {\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const validateInput = input => {\n    if (!input.trim()) {\n      alert('Please enter your meditation purpose.');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleMeditationPurposeChange = e => setMeditationPurpose(e.target.value);\n\n  const sendToOpenAI = async () => {\n    if (!validateInput(meditationPurpose)) return;\n    setLoading(true);\n    const prompt = `Analyze and provide suggestions based on this meditation purpose: \"${meditationPurpose}\"`;\n\n    try {\n      var _response$data$choice, _response$data$choice2;\n\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-4',\n        messages: [{\n          role: 'system',\n          content: 'You are a meditation assistant.'\n        }, {\n          role: 'user',\n          content: prompt\n        }]\n      }, {\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseText = ((_response$data$choice = response.data.choices[0]) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice.message) === null || _response$data$choice2 === void 0 ? void 0 : _response$data$choice2.content) || '';\n      const parsedSentences = responseText.split('. ').map(sentence => sentence.trim()).filter(Boolean);\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n      setAiResponse(parsedSentences);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"What's your meditation purpose?\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    onChange: handleMeditationPurposeChange,\n    value: meditationPurpose,\n    placeholder: \"Enter your purpose...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: sendToOpenAI,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, loading ? 'Processing...' : 'Submit'), aiResponse && /*#__PURE__*/React.createElement(ResponseContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"AI Suggestions:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, sentence))))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","axios","Container","div","Card","Title","h1","Input","input","Button","button","ResponseContainer","Register","meditationPurpose","setMeditationPurpose","aiResponse","setAiResponse","loading","setLoading","validateInput","trim","alert","handleMeditationPurposeChange","e","target","value","sendToOpenAI","prompt","response","post","model","messages","role","content","headers","process","env","REACT_APP_OPENAI_API_KEY","responseText","data","choices","message","parsedSentences","split","map","sentence","filter","Boolean","localStorage","setItem","JSON","stringify","error","console","index","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background: #f5f5f7;\n  font-family: -apple-system, BlinkMacSystemFont, \"Helvetica Neue\", Arial, sans-serif;\n`;\n\nconst Card = styled.div`\n  background: white;\n  padding: 40px;\n  border-radius: 20px;\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n  max-width: 480px;\n  width: 90%;\n  text-align: center;\n`;\n\nconst Title = styled.h1`\n  font-size: 2rem;\n  font-weight: 600;\n  color: #1d1d1f;\n  margin-bottom: 30px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 1.2rem;\n  text-align: center;\n  border: none;\n  border-radius: 12px;\n  background: #f1f1f1;\n  margin-bottom: 20px;\n  outline: none;\n  padding: 0 20px;\n  font-weight: 400;\n  color: #1d1d1f;\n  transition: all 0.3s ease;\n\n  &:focus {\n    background: #ffffff;\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  height: 50px;\n  font-size: 1.4rem;\n  font-weight: 600;\n  background: #007aff;\n  border: none;\n  border-radius: 12px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-top: 20px;\n  box-shadow: 0 4px 10px rgba(0, 122, 255, 0.3);\n\n  &:hover {\n    background: #005ecb;\n  }\n\n  &:disabled {\n    background: #d1d1d6;\n    cursor: not-allowed;\n  }\n`;\n\nconst ResponseContainer = styled.div`\n  margin-top: 30px;\n  text-align: left;\n  font-size: 1.1rem;\n  color: #333;\n`;\n\nfunction Register() {\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const validateInput = (input) => {\n    if (!input.trim()) {\n      alert('Please enter your meditation purpose.');\n      return false;\n    }\n    return true;\n  };\n\n  const handleMeditationPurposeChange = (e) => setMeditationPurpose(e.target.value);\n\n  const sendToOpenAI = async () => {\n    if (!validateInput(meditationPurpose)) return;\n    setLoading(true);\n\n    const prompt = `Analyze and provide suggestions based on this meditation purpose: \"${meditationPurpose}\"`;\n\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: [\n            { role: 'system', content: 'You are a meditation assistant.' },\n            { role: 'user', content: prompt },\n          ],\n        },\n        {\n          headers: {\n            'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const responseText = response.data.choices[0]?.message?.content || '';\n      const parsedSentences = responseText.split('. ').map(sentence => sentence.trim()).filter(Boolean);\n\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n\n      setAiResponse(parsedSentences);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Card>\n        <Title>What's your meditation purpose?</Title>\n        <Input\n          type=\"text\"\n          onChange={handleMeditationPurposeChange}\n          value={meditationPurpose}\n          placeholder=\"Enter your purpose...\"\n        />\n        <Button onClick={sendToOpenAI} disabled={loading}>\n          {loading ? 'Processing...' : 'Submit'}\n        </Button>\n        {aiResponse && (\n          <ResponseContainer>\n            <h2>AI Suggestions:</h2>\n            <ul>\n              {aiResponse.map((sentence, index) => (\n                <li key={index}>{sentence}</li>\n              ))}\n            </ul>\n          </ResponseContainer>\n        )}\n      </Card>\n    </Container>\n  );\n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}