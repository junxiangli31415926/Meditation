{"ast":null,"code":"var _jsxFileName = \"/Users/john/Desktop/Meditation/src/pages/Register.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [step, setStep] = useState(1);\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const validateInput = input => {\n    if (!input.trim()) {\n      alert('Please fill out this field.');\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleNext = async () => {\n    if (step === 1 && validateInput(name)) {\n      localStorage.setItem('name', name);\n      setStep(2);\n    } else if (step === 2 && validateInput(age)) {\n      localStorage.setItem('age', age);\n      setStep(3);\n    } else if (step === 3 && validateInput(meditationDuration)) {\n      localStorage.setItem('meditationDuration', meditationDuration);\n      setStep(4);\n    } else if (step === 4 && validateInput(meditationType)) {\n      localStorage.setItem('meditationType', meditationType);\n      setStep(5);\n    } else if (step === 5 && validateInput(meditationPurpose)) {\n      await sendToOpenAI();\n    }\n  };\n\n  const sendToOpenAI = async () => {\n    setLoading(true);\n\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-4',\n        messages: [{\n          role: 'system',\n          content: 'You are a meditation assistant providing concise guidance.'\n        }, {\n          role: 'user',\n          content: `Provide three short meditation guidance messages based on this meditation purpose: \"${meditationPurpose}\"`\n        }]\n      }, {\n        headers: {\n          Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\n          // 从.env文件获取API密钥\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseText = response.data.choices[0].message.content;\n      const parsedSentences = responseText.split('. ').slice(0, 3).map(sentence => sentence.trim());\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n      setAiResponse(parsedSentences);\n      setStep(6);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QuestionContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, step === 1 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, \"What is your name?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setName(e.target.value),\n    value: name,\n    placeholder: \"Enter your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  })), step === 2 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, \"What is your age?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setAge(e.target.value),\n    value: age,\n    type: \"number\",\n    placeholder: \"Enter your age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  })), step === 3 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, \"How long would you like to meditate today?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setMeditationDuration(e.target.value),\n    value: meditationDuration,\n    placeholder: \"Enter duration (e.g. 10 mins)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  })), step === 4 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Would you like guided or unguided meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setMeditationType(e.target.value),\n    value: meditationType,\n    placeholder: \"Guided/Unguided\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 15\n    }\n  })), step === 5 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, \"What's the purpose for your meditation?\"), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setMeditationPurpose(e.target.value),\n    value: meditationPurpose,\n    placeholder: \"Enter your purpose...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  })), step === 6 && aiResponse && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MediumTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }, \"Suggestions from AI:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, aiResponse.map((sentence, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, sentence))), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.history.push('/'),\n    text: \"Next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNext,\n    text: loading ? 'Processing...' : step < 6 ? 'Next' : 'Finish',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default React.memo(Register);","map":{"version":3,"sources":["/Users/john/Desktop/Meditation/src/pages/Register.js"],"names":["React","useState","styled","axios","MediumTitle","Button","Container","div","Input","input","QuestionContainer","Register","props","step","setStep","name","setName","age","setAge","meditationDuration","setMeditationDuration","meditationType","setMeditationType","meditationPurpose","setMeditationPurpose","aiResponse","setAiResponse","loading","setLoading","validateInput","trim","alert","handleNext","localStorage","setItem","sendToOpenAI","response","post","model","messages","role","content","headers","Authorization","process","env","REACT_APP_OPENAI_API_KEY","responseText","data","choices","message","parsedSentences","split","slice","map","sentence","JSON","stringify","error","console","e","target","value","index","history","push","memo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nimport { MediumTitle } from 'style/style';\nimport Button from 'components/Button/Button';\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 92vh;\n  width: 100vw;\n  top: 0;\n  left: 0;\n\n  @media (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  font-size: 2.5rem;\n  text-align: center;\n  border-bottom: 3px solid black;\n  margin-bottom: 5rem;\n\n  @media (max-width: 900px) {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 576px) {\n    width: 80%;\n    font-size: 1.6rem;\n  }\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction Register(props) {\n  const [step, setStep] = useState(1);\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [meditationDuration, setMeditationDuration] = useState('5');\n  const [meditationType, setMeditationType] = useState('Guided');\n  const [meditationPurpose, setMeditationPurpose] = useState('');\n  const [aiResponse, setAiResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const validateInput = (input) => {\n    if (!input.trim()) {\n      alert('Please fill out this field.');\n      return false;\n    }\n    return true;\n  };\n\n  const handleNext = async () => {\n    if (step === 1 && validateInput(name)) {\n      localStorage.setItem('name', name);\n      setStep(2);\n    } else if (step === 2 && validateInput(age)) {\n      localStorage.setItem('age', age);\n      setStep(3);\n    } else if (step === 3 && validateInput(meditationDuration)) {\n      localStorage.setItem('meditationDuration', meditationDuration);\n      setStep(4);\n    } else if (step === 4 && validateInput(meditationType)) {\n      localStorage.setItem('meditationType', meditationType);\n      setStep(5);\n    } else if (step === 5 && validateInput(meditationPurpose)) {\n      await sendToOpenAI();\n    }\n  };\n\n  const sendToOpenAI = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-4',\n          messages: [\n            { role: 'system', content: 'You are a meditation assistant providing concise guidance.' },\n            { role: 'user', content: `Provide three short meditation guidance messages based on this meditation purpose: \"${meditationPurpose}\"` },\n          ],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,  // 从.env文件获取API密钥\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n\n      const responseText = response.data.choices[0].message.content;\n      const parsedSentences = responseText.split('. ').slice(0, 3).map(sentence => sentence.trim());\n\n      localStorage.setItem('meditationPurpose', meditationPurpose);\n      localStorage.setItem('meditationResponse', JSON.stringify(parsedSentences));\n\n      setAiResponse(parsedSentences);\n      setStep(6);\n    } catch (error) {\n      console.error('Error sending data to OpenAI:', error);\n      alert('Failed to process meditation purpose. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <QuestionContainer>\n          {step === 1 && (\n            <>\n              <MediumTitle>What is your name?</MediumTitle>\n              <Input onChange={(e) => setName(e.target.value)} value={name} placeholder=\"Enter your name\" />\n            </>\n          )}\n          {step === 2 && (\n            <>\n              <MediumTitle>What is your age?</MediumTitle>\n              <Input onChange={(e) => setAge(e.target.value)} value={age} type=\"number\" placeholder=\"Enter your age\" />\n            </>\n          )}\n          {step === 3 && (\n            <>\n              <MediumTitle>How long would you like to meditate today?</MediumTitle>\n              <Input\n                onChange={(e) => setMeditationDuration(e.target.value)}\n                value={meditationDuration}\n                placeholder=\"Enter duration (e.g. 10 mins)\"\n              />\n            </>\n          )}\n          {step === 4 && (\n            <>\n              <MediumTitle>Would you like guided or unguided meditation?</MediumTitle>\n              <Input\n                onChange={(e) => setMeditationType(e.target.value)}\n                value={meditationType}\n                placeholder=\"Guided/Unguided\"\n              />\n            </>\n          )}\n          {step === 5 && (\n            <>\n              <MediumTitle>What's the purpose for your meditation?</MediumTitle>\n              <Input\n                onChange={(e) => setMeditationPurpose(e.target.value)}\n                value={meditationPurpose}\n                placeholder=\"Enter your purpose...\"\n              />\n            </>\n          )}\n          {step === 6 && aiResponse && (\n            <>\n              <MediumTitle>Suggestions from AI:</MediumTitle>\n              <ul>\n                {aiResponse.map((sentence, index) => (\n                  <li key={index}>{sentence}</li>\n                ))}\n              </ul>\n              <Button onClick={() => props.history.push('/')} text=\"Next\" />\n            </>\n          )}\n          <Button onClick={handleNext} text={loading ? 'Processing...' : step < 6 ? 'Next' : 'Finish'} />\n        </QuestionContainer>\n      </Container>\n    </div>\n  );\n}\n\nexport default React.memo(Register);\n"]},"metadata":{},"sourceType":"module"}